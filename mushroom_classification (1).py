# -*- coding: utf-8 -*-
"""mushroom_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HI9ibr4EspPff8yT_C3Zt0hCweskiT3f
"""

from google.colab import drive
drive.mount('/content/drive')

#Load dataset
import pandas as pd
mushroom_df = pd.read_csv("/content/drive/MyDrive/mushrooms.csv")

#Preprocessing
mushroom_df.info()

#Check for null
print(mushroom_df.isnull().sum())

mushroom_df.head()

#mapping each letter to numerical value
from sklearn.preprocessing import LabelEncoder

mappings= list()
encoder= LabelEncoder()

for column in mushroom_df.columns:
    mushroom_df[column] = encoder.fit_transform(mushroom_df[column])
    mapping_dictionary = {index: label for index, label in enumerate(encoder.classes_)}
    mappings.append(mapping_dictionary)
mappings

mushroom_df.head()

#Define target (y) and features (x)
x = mushroom_df.drop('class', axis=1)
y = mushroom_df['class']

#To see shape
x.shape, y.shape

#Scaling x values
from sklearn.preprocessing import StandardScaler
scaler= StandardScaler()
x=pd.DataFrame(scaler.fit_transform(x), columns=x.columns)
x

#Train, test splits
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

x_train.shape, x_test.shape, y_train.shape, y_test.shape

#Decision Tree Algorithm

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, recall_score, precision_score

# Train Decision Tree model
dt_model = DecisionTreeClassifier(random_state=0)
dt_model.fit(x_train, y_train)

# Prediction
y_pred_dt = dt_model.predict(x_test)

# Evaluation
print("Decision Tree Accuracy:", accuracy_score(y_test, y_pred_dt))
print("Sensitivity (Recall):", recall_score(y_test, y_pred_dt))
print("Specificity:", precision_score(y_test, y_pred_dt))
print("\nClassification Report:\n\n", classification_report(y_test, y_pred_dt))
print("\nConfusion Matrix:\n\n", confusion_matrix(y_test, y_pred_dt))

#KNN Algorithm
from sklearn.neighbors import KNeighborsClassifier

# Tain the KNN model
knn_model = KNeighborsClassifier()
knn_model.fit(x_train, y_train)

# Prediction
y_pred_knn = knn_model.predict(x_test)

# Evaluation
print("KNN Accuracy:", accuracy_score(y_test, y_pred_knn))
print("Sensitivity (Recall):", recall_score(y_test, y_pred_knn))
print("Specificity:", precision_score(y_test, y_pred_knn))
print("\nClassification Report:\n\n", classification_report(y_test, y_pred_knn))
print("\nConfusion Matrix:\n\n", confusion_matrix(y_test, y_pred_knn))

#drawing decision tree
from sklearn.tree import export_graphviz
from IPython.display import Image
import pydotplus

# Export Decision Tree as DOT file
dot_data = export_graphviz(
    dt_model,
    out_file=None,
    feature_names=x.columns,
    class_names=['edible', 'poisonous'],
    filled=True,
    rounded=False
)

#PyDotPlus graph from DOT data
graph = pydotplus.graph_from_dot_data(dot_data)

# Save
graph.write_png("/content/drive/MyDrive/decision_tree.png")

# Display
Image(graph.create_png())